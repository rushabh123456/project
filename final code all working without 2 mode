#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>

const char number_of_rows = 4;
const char number_of_columns = 4;

char row_pins[number_of_rows] = {11, 3, 4, 5};
char column_pins[number_of_columns] = {6, 7, 8, 9};

char key_array[number_of_rows][number_of_columns] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

Keypad k = Keypad(makeKeymap(key_array), row_pins, column_pins, number_of_rows, number_of_columns);

#define ESC_PIN 2

Servo esc;

enum MotorMode {
  WATER,
  OIL
};

MotorMode currentMode = WATER;  // Default mode is water

LiquidCrystal_I2C lcd(0x27, 16, 2);  // I2C address 0x27, 16 columns, 2 rows

unsigned long motorStartTime = 0;  // Variable to store the start time of the motor
unsigned long totalDuration = 0;   // Variable to store the total duration

void setup() {
  Serial.begin(9600);
  esc.attach(ESC_PIN, 1000, 2000);

  // Initialize LCD
  lcd.init();
  lcd.backlight();  // Turn on the LCD screen backlight
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("liter:0.00");
  lcd.setCursor(0, 1);
  lcd.print("Mode:Water");
  lcd.setCursor(12, 1);
  lcd.print("0.0%");
}

void loop() {
  char key_pressed = k.getKey();
  static unsigned long enteredNumber = 0;
  static bool numberEntered = false;
  unsigned long duration = 0;

  if (key_pressed) {
    if (key_pressed == '#') {
      // Enter button
      if (numberEntered) {
        Serial.print("Entered Number: ");
        Serial.println(enteredNumber);

        // Adjust duration based on the current mode
        duration = (currentMode == WATER) ? (enteredNumber * 20) : (enteredNumber * 30);
        totalDuration += duration;  // Add to the total duration

        enteredNumber = 0;  // Reset entered number after printing
        numberEntered = false;  // Reset numberEntered flag
        enableMotor(duration);

        // Update LCD
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("liter:0.000");
        lcd.setCursor(0, 1);
        lcd.print("Mode:");
        lcd.print((currentMode == WATER) ? "Water " : "Oil   ");
        lcd.backlight();  // Turn on backlight

        // Live progress display while running motor
        while (millis() - motorStartTime < duration) {
          unsigned long elapsedTime = millis() - motorStartTime;
          float completionPercentage = (float)elapsedTime / totalDuration * 100.0;  // Calculate percentage

          lcd.setCursor(11, 1);
          lcd.print(completionPercentage, 1);  // Display percentage with one decimal place
          lcd.print('%');
        }

        disableMotor();
      }
    } else if (key_pressed == '*') {
      // Clear button
      if (enteredNumber > 0) {
        enteredNumber /= 10;  // Remove the last digit
        Serial.print("Cleared Digit: ");
        Serial.println(enteredNumber % 10);  // Display the cleared digit
      } else {
        Serial.println("Number Cleared");
      }

      // Update LCD
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("liter:0.000");
      lcd.setCursor(0, 1);
      lcd.print("Mode: ");
      lcd.print((currentMode == WATER) ? "Water " : "Oil   ");
      lcd.backlight();  // Turn on backlight
    } else if (key_pressed == 'A') {
      // Switch to water mode
      currentMode = WATER;
      Serial.println("Water Mode Enabled");

      // Update LCD
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Mode: Water");
    } else if (key_pressed == 'B') {
      // Switch to oil mode
      currentMode = OIL;
      Serial.println("Oil Mode Enabled");

      // Update LCD
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Mode: Oil");
    } else if (isdigit(key_pressed)) {
      // Numeric key, update the entered number
      if (enteredNumber < 1000000) {  // Handle up to 6 digits
        enteredNumber = enteredNumber * 10 + (key_pressed - '0');
        numberEntered = true;
        Serial.print("Entered Number: ");
        Serial.println(enteredNumber);

        // Update LCD
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("liter:");
        lcd.print(float(enteredNumber) / 1000, 3);  // Display entered quantity in liters with 3 decimal places
        lcd.setCursor(11, 1);
        lcd.print("0.0%");
        lcd.setCursor(0, 1);
        lcd.print("Mode:");
        lcd.print((currentMode == WATER) ? "Water " : "Oil   ");
      }
    }
  }
}

void enableMotor(unsigned long duration) {
  esc.write(180);  // Set motor to the maximum position
  delay(1000);     // Allow time for the motor to reach the maximum position
  motorStartTime = millis();  // Record the start time of the motor
}

void disableMotor() {
  esc.write(0);    // Set motor to the minimum position
  delay(2000);     // Allow time for the motor to reach the minimum position
   totalDuration = 0;  // Clear the total duration after completing a task
}
